# -*- coding: utf-8 -*-
"""Object detection using YOLOV4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SVAdQnSlOKx9mkz2cplN63UlwNz2V7uJ

**YOLOv4 Object Detector with Darknet in the Cloud!**

1. Cloning and Building Darknet
"""

# clone darknet repo
!git clone https://github.com/AlexeyAB/darknet

# Commented out IPython magic to ensure Python compatibility.
# change makefile to have GPU and OPENCV enabled
# %cd darknet
!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile
!sed -i 's/CUDNN_HALF=0/CUDNN_HALF=1/' Makefile

# verify CUDA
!/usr/local/cuda/bin/nvcc --version

# make darknet (builds darknet so that you can then use the darknet executable file to run or train object detectors)
!make

"""2. Download pre-trained YOLOv4 weights
*YOLOv4 has been trained already on the coco dataset which has 80 classes that it can predict. We will grab these pretrained weights so that we can run YOLOv4 on these pretrained classes and get detections.*
"""

!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.weights

"""3. Define Helper Functions
*These three functions are helper functions that will allow you to show the image in your Colab Notebook after running your detections, as well as upload and download images to and from your Cloud VM.*
"""

# Commented out IPython magic to ensure Python compatibility.
# define helper functions
def imShow(path):
  import cv2
  import matplotlib.pyplot as plt
#   %matplotlib inline

  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)

  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()

# use this to upload files
def upload():
  from google.colab import files
  uploaded = files.upload() 
  for name, data in uploaded.items():
    with open(name, 'wb') as f:
      f.write(data)
      print ('saved file', name)

# use this to download a file  
def download(path):
  from google.colab import files
  files.download(path)

"""4. Run Your Detections with Darknet and YOLOv4!"""

!./darknet detector test <path to .data file> <path to config> <path to weights> <path to image>

imShow('predictions.jpg')

# run darknet detection on test images
!./darknet detector test cfg/coco.data cfg/yolov4.cfg yolov4.weights data/***.jpg

# show image using our helper function
imShow('*****.jpg')

"""# **5.Uploading Local Files to Use**

To upload local files just use our helper function by running 'upload()' as seen below. Click Choose Files and select the image from your local machine that you want to upload to the cloud VM.

If this function doesn't work for you then click the Upload button in the File Explorer on the left side of your notebook.
"""

# The image should save to the root directory of the cloud VM so that you can access it from the darknet command by running.
!./darknet detector test cfg/coco.data cfg/yolov4.cfg yolov4.weights ../<your image name>

# Commented out IPython magic to ensure Python compatibility.
# try out the upload helper function! (I uploaded an image called highway.jpg, upload whatever you want!)
# %cd ..
upload()
# %cd darknet

# run darknet with YOLOv4 on your personal image! (note yours will not be called highway.jpg so change the name)
!./darknet detector test cfg/coco.data cfg/yolov4.cfg yolov4.weights ../*******.jpg
imShow('predictions.jpg')

# Download Files 
!cp <file to download> <destination to save file>

# LOCAL MACHINE DOWNLOAD
# if you get an error first run then run it again and it should work
download('predictions.jpg')

# LOCAL MACHINE DOWNLOAD
# if you get an error first run then run it again and it should work
download('predictions.jpg')

"""6. Running YOLOv4 on Video in the Cloud!"""

# upload the video of your choosing! (Feel free to use the same video I do, it is in the Github repository)
upload()

!./darknet detector demo cfg/coco.data cfg/yolov4.cfg yolov4.weights -dont_show testv.mp4 -i 0 -out_filename results.avi

# download the video with detections shown
download('results.avi')